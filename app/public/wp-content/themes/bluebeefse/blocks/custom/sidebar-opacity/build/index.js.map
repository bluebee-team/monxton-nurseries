{"version":3,"file":"index.js","mappings":"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","sources":["webpack://sidebar-opacity/./src/attributes/sidebarOpacity.js","webpack://sidebar-opacity/external window \"ReactJSXRuntime\"","webpack://sidebar-opacity/webpack/bootstrap","webpack://sidebar-opacity/webpack/runtime/compat get default export","webpack://sidebar-opacity/webpack/runtime/define property getters","webpack://sidebar-opacity/webpack/runtime/hasOwnProperty shorthand","webpack://sidebar-opacity/webpack/runtime/make namespace object"],"sourcesContent":["/**\n * sidebarOpacity.js - allow for a base Opacity style attribute on any block.\n */\nconst { __ } = wp.i18n;\n\n/**\n * Conditionally, you can enable this control for certain blocks if you need. Use the array to set the machine name of every block you want to enable this for.\n * If you aren't sure what the machine name is, go into the wp-includes/blocks folder, find the block.json file corresponding to the block you want to include, and copy the 'name' value.\n * \n * const blockWhitelist = [\n *  'core/image',\n *  'core/paragraph'\n * ];\n * \n * Within the custom attribute setup below (setOpacityAttribute), right before the object is assigned, you can pull the name from each block and then prevent it from appearing in the sidebar.\n * \n * if (!blockWhitelist.includes( name ) ) {\n *  return settings;\n * }\n * \n * Then within the BlockListBlock function below, set a conditional around the <BlockListBlock> declaration and return the replacement props. This will ignore any custom props you set for that block.\n * Of course, this logic can be reversed completely and used to set up a blacklist.\n * \n * if (!blockWhitelist.includes( props.name ) ) {\n *  return (\n *      <BlockListBlock { ...props } />\n *  );\n * }\n */\n\nconst { createHigherOrderComponent } = wp.compose;\nconst { Fragment, useState } = wp.element;\nconst { InspectorControls } = wp.blockEditor;\nconst { PanelBody, SelectControl, RangeControl } = wp.components;\n\nconst blockOpacityAttribute = ( settings, name ) => {\n    if (!name.startsWith('core/')) {\n        return settings;\n    }\n\n    return Object.assign( {}, settings, {\n        attributes: Object.assign( {}, settings.attributes, {\n            blockOpacity: { type: 'number', default: 100 }, // Default to 100 (full opacity)\n        } ),\n    } );\n};\n\nwp.hooks.addFilter(\n    'blocks.registerBlockType',\n    'bluebeefse-custom/block-opacity-attribute',\n    blockOpacityAttribute\n);\n\nconst blockOpacityControl = createHigherOrderComponent( ( BlockEdit ) => {\n    return ( props ) => {\n        \n        // If current block is not allowed\n    \tif (!props.name.startsWith('core/')) {\n            return (\n                <BlockEdit { ...props } />\n            );\n        }\n\n        const { attributes, setAttributes } = props;\n        const { blockOpacity = 100 } = attributes; // Default to 100\n\n        return (\n            <Fragment>\n                <BlockEdit { ...props } />\n                <InspectorControls group=\"styles\">\n                    <PanelBody>\n                        <RangeControl\n                            help=\"Select the opacity level for this block.\"\n                            label=\"Opacity\"\n                            max={ 100 }\n                            min={ 0 }\n                            value={ blockOpacity }\n                            onChange={ ( newBlockOpacity = 100 ) => { // Default to 100 if no value\n                                setAttributes({ blockOpacity: newBlockOpacity });\n                            } }\n                        />\n                    </PanelBody>\n                </InspectorControls>\n            </Fragment>\n        );\n    };\n}, 'blockOpacityControl' );\n\nwp.hooks.addFilter(\n    'editor.BlockEdit',\n    'bluebeefse-custom/block-opacity-control',\n    blockOpacityControl\n);\n\nconst blockOpacityListBlock = createHigherOrderComponent( ( BlockListBlock ) => {\n    return ( props ) => {\n        const { attributes } = props;\n        const { blockOpacity = 100 } = attributes; // Default to 100 if not set\n        \n        // Apply the opacity to the block wrapper for editor display\n        const updatedWrapperProps = {\n            ...props.wrapperProps,\n            style: {\n                ...props.wrapperProps?.style,\n                opacity: blockOpacity !== 100 ? blockOpacity / 100 : undefined, // Only apply if not 100\n            },\n        };\n\n        return <BlockListBlock { ...props } wrapperProps={ updatedWrapperProps } />;\n    };\n}, 'blockOpacityListBlock' );\n\nwp.hooks.addFilter(\n    'editor.BlockListBlock',\n    'bluebeefse-custom/block-opacity-list-block',\n    blockOpacityListBlock\n);\n\nconst blockOpacitySave = ( extraProps, blockType, attributes ) => {\n    const { blockOpacity } = attributes;\n\n    // Only apply opacity style if blockOpacity is explicitly set and different from default (100)\n    if ( blockOpacity !== undefined && blockOpacity !== 100 ) {\n        extraProps.style = {\n            ...extraProps.style, // Preserve other styles\n            opacity: blockOpacity / 100, // Apply opacity if not default\n        };\n    }\n\n    return extraProps;\n};\n\nwp.hooks.addFilter(\n    'blocks.getSaveContent.extraProps',\n    'bluebeefse-custom/block-opacity-save',\n    blockOpacitySave\n);","module.exports = window[\"ReactJSXRuntime\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};"],"names":["__","wp","i18n","createHigherOrderComponent","compose","Fragment","useState","element","InspectorControls","blockEditor","PanelBody","SelectControl","RangeControl","components","blockOpacityAttribute","settings","name","startsWith","Object","assign","attributes","blockOpacity","type","default","hooks","addFilter","blockOpacityControl","BlockEdit","props","_jsx","setAttributes","_jsxs","children","group","help","label","max","min","value","onChange","newBlockOpacity","blockOpacityListBlock","BlockListBlock","updatedWrapperProps","wrapperProps","style","opacity","undefined","blockOpacitySave","extraProps","blockType"],"sourceRoot":""}